name: Intersect (main)

on:
  push:
    branches: [ "main" ]
    paths:
      - 'Framework/**'
      - 'Intersect*/**'
      - '.github/bundles/**'
      - '.github/workflows/build.yml'
      - '!Intersect.Tests*/**'
      - '!launchSettings.json'
      - '!*.md'
      - '!Examples/**'
      - '!Documentation/**'
      - '!.git*'
      - '!*.DotSettings'
  workflow_dispatch:
    inputs:
      forceBuild:
        description: 'If the build should be forced even on cache hit'
        default: false
        type: boolean
      forceRestore:
        description: 'If dependencies should be forced even on cache hit'
        default: false
        type: boolean
      workflowDebug:
        description: 'If the workflow should be debugged (skips packaging and publishing)'
        default: true
        type: boolean
      packagingDebug:
        description: 'If the packaging step should be debugged (skips publishing)'
        default: true
        type: boolean
      skipForumPublish:
        description: 'If publishing to the forum should be skipped'
        default: true
        type: boolean

permissions:
  contents: write

env:
  VERSION_PREFIX: 0.8.0
  VERSION_SUFFIX_NAME: beta
  VERSION_SUFFIX: -beta

jobs:
  generate-keys:
    name: Generate Version-Specific Network Keys
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache binaries
        uses: actions/cache@v4.2.0
        id: cache-binaries
        with:
          key: ${{ runner.os }}-binaries-keys-${{ env.VERSION_PREFIX }}${{ env.VERSION_SUFFIX }}-${{ hashFiles('/*.props', 'Intersect*/**/*.cs*', 'Framework/**/*.cs*') }}
          path: |
            Intersect*/bin/Release/**/*

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4.1.0
        with:
          dotnet-version: 8.0.x

      - name: Cache NuGet dependencies
        uses: actions/cache@v4.2.0
        id: cache-nuget
        with:
          key: ${{ runner.os }}-nuget-${{ env.VERSION_PREFIX }}${{ env.VERSION_SUFFIX }}-${{ hashFiles('/*.props', 'Intersect*/*.csproj', 'Framework/*/*.csproj') }}
          path: |
            ~/.nuget/packages
            Intersect*/obj/

      - name: Apply environment patches
        run: git apply disable-windows-only.patch

      - name: Restore NuGet Packages
        run: dotnet restore Intersect.sln

      - name: Build Intersect.Network
        run: dotnet build Intersect.Network/Intersect.Network.csproj --sc -r linux-x64 -p:Configuration=Release -p:PackageVersion=${{ env.VERSION_PREFIX }}${{ env.VERSION_SUFFIX }}.${{ github.run_number }}+build.${{ github.sha }} -p:Version=${{ env.VERSION_PREFIX }}.${{ github.run_number }}

      - name: Upload keys
        uses: actions/upload-artifact@v4.5.0
        with:
          if-no-files-found: error
          name: keys
          path: ./Intersect.Network/bin/Release/keys/*

  build-linux:
    name: Build for Linux
    needs: [generate-keys]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4.1.0
        with:
          dotnet-version: 8.0.x

      - name: Download keys
        uses: actions/download-artifact@v4.1.8
        with:
          name: keys
          path: ./Intersect.Network/bin/Release/keys/

      - name: Build solution
        run: dotnet publish Intersect.sln --sc -r linux-x64 -p:Configuration=Release -p:PackageVersion=${{ env.VERSION_PREFIX }}${{ env.VERSION_SUFFIX }}.${{ github.run_number }}+build.${{ github.sha }} -p:Version=${{ env.VERSION_PREFIX }}.${{ github.run_number }}

      - name: Tarball artifacts to maintain unix file permissions
        run: tar -cvf linux.tar Intersect.Client/bin/Release/*/*/publish Intersect.Server/bin/Release/*/*/publish

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.5.0
        with:
          if-no-files-found: error
          name: engine-${{ runner.os }}
          path: linux.tar

  build-macos:
    name: Build for MacOS
    needs: [generate-keys]
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4.1.0
        with:
          dotnet-version: 8.0.x

      - name: Build solution
        run: dotnet publish Intersect.sln --sc -r osx-x64 -p:Configuration=Release -p:PackageVersion=${{ env.VERSION_PREFIX }}${{ env.VERSION_SUFFIX }}.${{ github.run_number }}+build.${{ github.sha }}

      - name: Tarball artifacts to maintain unix file permissions
        run: tar -cvf osx.tar Intersect.Client/bin/Release/*/*/publish Intersect.Server/bin/Release/*/*/publish

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.5.0
        with:
          if-no-files-found: error
          name: engine-${{ runner.os }}
          path: osx.tar

  build-windows:
    name: Build for Windows
    needs: [generate-keys]
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4.1.0
        with:
          dotnet-version: 8.0.x

      - name: Build solution
        run: dotnet publish Intersect.sln --sc -r win-x64 -p:Configuration=Release -p:PackageVersion=${{ env.VERSION_PREFIX }}${{ env.VERSION_SUFFIX }}.${{ github.run_number }}+build.${{ github.sha }}

      - name: Tarball artifacts to maintain unix file permissions
        run: tar -cvf win.tar Intersect.Client/bin/Release/*/*/publish Intersect.Editor/bin/Release/*/*/publish Intersect.Server/bin/Release/*/*/publish
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.5.0
        with:
          if-no-files-found: error
          name: engine-${{ runner.os }}
          path: win.tar

  debug-build-artifacts:
    name: Debug Build Artifacts
    if: always()
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          pattern: engine-*
          merge-multiple: true
          path: .

      - name: Extract build archives
        run: |
          tar -xvf linux.tar
          tar -xvf osx.tar
          tar -xvf win.tar

      - name: Debug output
        run: ls -laR .

  publish-github:
    name: Publish GitHub Release
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: inputs.workflowDebug != true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          pattern: engine-*
          merge-multiple: true
          path: .

      - name: Extract build archives
        run: |
          tar -xvf linux.tar
          tar -xvf osx.tar
          tar -xvf win.tar

      - name: Publish GitHub Release
        uses: ncipollo/release-action@v1.13.0
        with:
          artifacts: "linux.tar, osx.tar, win.tar"
          commit: ${{ github.sha }}
          repository: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true
          name: ${{ env.VERSION_PREFIX }}${{ env.VERSION_SUFFIX }}.${{ github.run_number }}
          tag: v${{ env.VERSION_PREFIX }}${{ env.VERSION_SUFFIX }}.${{ github.run_number }}
          makeLatest: true
          prerelease: false
